/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/Affair": {
    get: {
      parameters: {
        query?: {
          Title?: string;
          Note?: string;
          Active?: boolean;
          Status?: components["schemas"]["Status"];
          Type?: components["schemas"]["Type"];
          DueDate?: string;
          Tags?: string[];
          Page?: number;
          PerPage?: number;
          SortBy?: components["schemas"]["Sorting"];
          Sort?: "Title" | "Note" | "Active" | "Status" | "Type" | "DueDate" | "Tags";
          CombineWith?: components["schemas"]["CombineType"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Affair"][];
            "application/json": components["schemas"]["Affair"][];
            "text/json": components["schemas"]["Affair"][];
          };
        };
      };
    };
    put: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Affair"];
          "text/json": components["schemas"]["Affair"];
          "application/*+json": components["schemas"]["Affair"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": number;
            "application/json": number;
            "text/json": number;
          };
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Affair"];
          "text/json": components["schemas"]["Affair"];
          "application/*+json": components["schemas"]["Affair"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": number;
            "application/json": number;
            "text/json": number;
          };
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": number;
            "application/json": number;
            "text/json": number;
          };
        };
      };
    };
  };
  "/Page": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Page"][];
            "application/json": components["schemas"]["Page"][];
            "text/json": components["schemas"]["Page"][];
          };
        };
      };
    };
    put: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Page"];
          "text/json": components["schemas"]["Page"];
          "application/*+json": components["schemas"]["Page"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": number;
            "application/json": number;
            "text/json": number;
          };
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Page"];
          "text/json": components["schemas"]["Page"];
          "application/*+json": components["schemas"]["Page"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": number;
            "application/json": number;
            "text/json": number;
          };
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": number;
            "application/json": number;
            "text/json": number;
          };
        };
      };
    };
  };
  "/User": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["User"][];
            "application/json": components["schemas"]["User"][];
            "text/json": components["schemas"]["User"][];
          };
        };
      };
    };
    put: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["User"];
          "text/json": components["schemas"]["User"];
          "application/*+json": components["schemas"]["User"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": number;
            "application/json": number;
            "text/json": number;
          };
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["User"];
          "text/json": components["schemas"]["User"];
          "application/*+json": components["schemas"]["User"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": number;
            "application/json": number;
            "text/json": number;
          };
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": number;
            "application/json": number;
            "text/json": number;
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Affair: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createOn?: string;
      /** Format: date-time */
      modifiedOn?: string;
      title?: string | null;
      note?: string | null;
      active?: boolean;
      status?: components["schemas"]["Status"];
      type?: components["schemas"]["Type"];
      /** Format: date-time */
      dueDate?: string | null;
      tags?: string[] | null;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    CombineType: 0 | 1;
    Page: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createOn?: string;
      /** Format: date-time */
      modifiedOn?: string;
      title?: string | null;
      /** Format: uuid */
      userId?: string;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    Sorting: 0 | 1;
    /** @enum {string} */
    Status: "Absent" | "Scheduled" | "Completed" | "Failed";
    /** @enum {string} */
    Type: "Daily" | "Week" | "Month" | "Year";
    User: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createOn?: string;
      /** Format: date-time */
      modifiedOn?: string;
      pages?: components["schemas"]["Page"][] | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
