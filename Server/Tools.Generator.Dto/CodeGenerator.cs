using Microsoft.CodeAnalysis;
using Tools.Generator.Dto.Models;

namespace Tools.Generator.Dto;

internal class CodeGenerator {
	private readonly AutoDtoContext _autoDtoContext;
	private readonly SourceProductionContext _sourceContext;

	public CodeGenerator(SourceProductionContext sourceContext, AutoDtoContext autoDtoContext) {
		_autoDtoContext = autoDtoContext;
		_sourceContext = sourceContext;
	}

	internal static void Generate(SourceProductionContext context, AutoDtoContext _autoDtoContext) =>
		new CodeGenerator(context, _autoDtoContext).Generate();

	/// <summary>Добавление файлов</summary>
	private void Generate() {
		string targetNamespace = _autoDtoContext.DomainSymbol.ContainingNamespace.ToString();
		string domainClassName = _autoDtoContext.DomainSymbol.Name;
		string classNamespace = _autoDtoContext.DtoSymbol.ContainingNamespace.ToString();
		string className = _autoDtoContext.DtoSymbol.Name;
		string fields = GetField();

		var source = $$"""
		               // <auto-generated />

		               using {{targetNamespace}};

		               namespace {{classNamespace}};

		               /// <summary> <inheritdoc cref="{{domainClassName}}"/> </summary>
		               public partial class {{className}} {
		               {{fields}}
		               }
		               """;

		_sourceContext.AddSource($"{className}.g.cs", source);
	}

	//TODO защита от доменных объектов
	private string GetField() {
		string domainClassName = _autoDtoContext.DomainSymbol.Name;
		var fields = _autoDtoContext.Fields.Select(field => {
			string required = field.IsRequired ? "required " : "";

			return $$"""
			         /// <summary> <inheritdoc cref="{{domainClassName}}.{{field.Name}}"/> </summary>
			         public {{required}}{{field.Type}} {{field.Name}} { get; set; }
			         
			         """;
		});
		return string.Join("\n", fields);
	}
}